/* Color */
$white: #fff;
$dark-2: #28282f;
$dark-3: #36384D;
$dark-6: #6E6E7A;
$dark-9: #969AAF;
$dark-shadow: rgba($dark-3,.2);
$light-b: #bec0c7;
$light-d: #DCDEE4;
$light-e: #ededf2;
$light-f: #F9F9FC;
$point: #6F74F4;
$sub-sk: #08bbd7;
$danger-rd: #ed424d;
$positive-gn: #36be9c;
$warn-yl: #ffaf0e;

/* color for gradient */
$point-lt: #b993fb;
$sub-sk-dk: #799aff;
$warn-yl-dk: #ff8722;
$rd-lt: #FFA17F;
$rd-dk: #FF808F;

/* font-weight */
@mixin fw-lt {font-weight:100}
@mixin fw-dl {font-weight:300}
@mixin fw-rg {font-weight:400}
@mixin fw-md {font-weight:500}
@mixin fw-bd {font-weight:700}
@mixin fw-bk {font-weight:900}

/* default-boxshadow */
@mixin bxshadow {box-shadow:0 4px 20px 0 $dark-shadow}

/* Retina */
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}

/// Mixin to prefix several properties at once
/// @author Hugo Giraudel
/// @param {Map} $declarations - Declarations to prefix
/// @param {List} $prefixes (()) - List of prefixes to print
@mixin prefix($declarations, $prefixes: ()) {
  @each $property, $value in $declarations {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }
    // Output standard non-prefixed declaration
    #{$property}: $value;
  }
}

/* media query */
@mixin media-pc {
  @media only screen and (max-width: 1200px) {
    @content;
  }
}
@mixin media-md {
  @media only screen and (max-width: 992px) {
    @content;
  }
}
@mixin media-mb {
  @media only screen and (max-width: 768px) {
    @content;
  }
}

/* flex */
@mixin flexbox {
  display: -webkit-box;      /* OLD - iOS 6-, Safari 3.1-6 */
  display: -moz-box;         /* OLD - Firefox 19- (buggy but mostly works) */
  display: -webkit-flex;     /* NEW - Chrome */
  display: -ms-flexbox;      /* TWEENER - IE 10 */
  display: flex;             /* NEW, Spec - Opera 12.1, Firefox 20+ */
}
@mixin inline-flex {
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}
// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
     -moz-flex-wrap: $wrap;
      -ms-flex-wrap: $wrap;
          flex-wrap: $wrap;
}
// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
  -webkit-box-flex: $values;
     -moz-box-flex: $values;
      -webkit-flex: $values;
          -ms-flex: $values;
              flex: $values;
}
// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
     -moz-flex-direction: $direction;
      -ms-flex-direction: $direction;
          flex-direction: $direction;
}
// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around 
@mixin justify-content($justify) {
  -webkit-justify-content: $justify;
     -moz-justify-content: $justify;
      -ms-justify-content: $justify;
          justify-content: $justify;
            -ms-flex-pack: $justify;
}
// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch 
@mixin align-items($align) {
  -webkit-align-items: $align;
     -moz-align-items: $align;
      -ms-align-items: $align;
       -ms-flex-align: $align;
          align-items: $align;
}
// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch 
@mixin align-self($align) {
  -webkit-align-self: $align;
     -moz-align-self: $align;
      -ms-align-self: $align;
          align-self: $align;
}
// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  -webkit-flex-flow: $flow;
     -moz-flex-flow: $flow;
      -ms-flex-flow: $flow;
          flex-flow: $flow;
}

/* @include transition(property); */
@mixin transition($what...) {
  -webkit-transition-duration: 0.2s;
          transition-duration: 0.2s;
  -webkit-transition-timing-function: ease-in-out;
          transition-timing-function: ease-in-out;
  -webkit-transition-delay: 0s;
          transition-delay: 0s;
  -webkit-transition-property: $what;
          transition-property: $what;
}

/* animation */
@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }  
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }  
  @keyframes #{$animation-name} {
    @content;
  }
}
@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};      
}

/* gradient */
@mixin bg-gradient($start-color, $end-color, $orientation) { 
  background: $start-color;

  @if $orientation == 'vertical' {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == 'horizontal' {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}


/* margin padding 함께 사용 */
@mixin margin-padding($m-direction, $m-amount, $p-direction, $p-amount) {
  @if $m-direction == all {
    margin: $m-amount;
  } @else {
    margin-#{$m-direction}: $m-amount;
  }
  @if $p-direction == all {
    padding: $p-amount;
  } @else {
    padding-#{$p-direction}: $p-amount;
  }
}

/* hide text */
@mixin hide-txt {
  font-size:0;
  text-indent:-9999px
}

/* position */
@mixin absolute($left, $top, $right, $bottom) {
  position: absolute;
  left: $left;
  top: $top;
  right: $right;
  bottom: $bottom;
}